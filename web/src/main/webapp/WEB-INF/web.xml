<!--<web-app version="2.4"-->
         <!--xmlns="http://java.sun.com/xml/ns/j2ee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"-->
         <!--xmlns:context="http://www.springframework.org/schema/context"-->
         <!--xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee-->
	<!--http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd">-->
  <web-app xmlns="http://java.sun.com/xml/ns/javaee" version="2.5">

  <display-name>Spring MVC Application</display-name>

  <context-param>
    <param-name>log4jExposeWebAppRoot</param-name>
    <param-value>false</param-value>
  </context-param>
  <context-param>
    <param-name>log4jConfigLocation</param-name>
    <param-value>classpath:config/log4j.properties</param-value>
  </context-param>
  <!--&lt;!&ndash;启动一个watchdog线程每300秒扫描一下log4j配置文件的变化&ndash;&gt;-->
  <context-param>
    <param-name>log4jRefreshInterval</param-name>
    <param-value>300000</param-value>
  </context-param>
  <!--spring log4j监听器-->
  <listener>
    <listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
  </listener>

  <!-- Servlet Context Listener ======================================= -->

  <!--
    - Declare Spring context listener which sets up the Spring Application Context
    - containing all Cocoon components (and user defined beans as well).
    -->
  <listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>

  <!--
    - Declare Spring request listener which sets up the required RequestAttributes
    - to support Springs and Cocoon custom bean scopes like the request scope or the
    - session scope.
    -->
  <listener>
    <listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>
  </listener>

  <!-- sitemesh过滤 -->
  <filter>
    <filter-name>sitemesh</filter-name>
    <filter-class>com.opensymphony.sitemesh.webapp.SiteMeshFilter</filter-class>
  </filter>
  <filter-mapping>
    <filter-name>sitemesh</filter-name>
    <servlet-name>springmvc</servlet-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>

  <!-- 配置springMVC前端控制器(即访问的统一入口) -->
  <servlet>
    <servlet-name>springmvc</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
    <!-- contextConfigLocation配置springmvc加载的配置文件（配置处理器映射器、适配器等等）
         如果不配置，默认加载的事/WEB-INF/servlet名称-servlet.xml -->
    <!--<init-param>-->
      <!--<param-name>contextConfigLocation</param-name>-->
      <!--<param-value>classpath:springmvc.xml</param-value>-->
    <!--</init-param>-->
  </servlet>

  <servlet-mapping>
    <!--
     常用两种配置方式
     第一种：*.action，访问以.action结尾的，由DispatcherServlet解析
     第二种：/,所有访问的地址都由DispacherServlet进行解析，对于静态文件的解析需要配置不让DispacherServlet进
 行解析，
     使用此种方式可以实现RESTful风格的url
      -->
  <servlet-name>springmvc</servlet-name>
  <url-pattern>/</url-pattern>
  </servlet-mapping>

</web-app>
